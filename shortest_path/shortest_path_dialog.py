# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ShortestPathDialog
                                 A QGIS plugin
 This plugin can create a shortest path
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-11-21
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Cheng. Hu. Hou. Jiang.
        email                : 2101210065@stu.pku.edu.cn
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsVectorLayer,QgsProject,QgsRasterLayer
import qgis.utils
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from osgeo import ogr
from osgeo import gdal
import numpy as np
from .coord_to_num import coord_to_num, num_to_coord
from .aStar import a_star
import time

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'shortest_path_dialog_base.ui'))


class ShortestPathDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(ShortestPathDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect

        self.setupUi(self)

        # 信号与槽函数
        self.bt_loadsrc.clicked.connect(lambda: self.initlabel(self.line_src))
        self.bt_loadcost.clicked.connect(lambda: self.initlabel(self.line_cost))
        self.bt_export.clicked.connect(lambda: self.initlabel(self.line_export))
        self.bt_cancel.clicked.connect(self.close)
        # self.bt_ok.clicked.connect(self.ProcessMindis)
        self.bt_ok.clicked.connect(self.MainProcess)

    def initlabel(self,initobj):
        if initobj==self.line_export:
            ofd, filt = QFileDialog.getSaveFileName(self, '选择shapefile文件', './', 'Shapefile文件(*.shp);;ALL(*.*)')
            initobj.setText(ofd)
        else:
            ofd, filt = QFileDialog.getOpenFileName(self, '选择TIF文件', './', 'TIF文件(*.tif);;ALL(*.*)')
            initobj.setText(ofd)

    def ProcessMindis(self):
        '''
        这个函数不执行
        这是把矢量/栅格图加载到QGIS上的例子
        '''
        path='D:/CTY/研一/学习/GIS应用/插件作业/Testdata/地级市.shp'
        pathR='D:/CTY/研一/学习/GIS应用/插件作业/Testdata/dem1.tif'
        name='地级市'
        nameR='Reclass_id2011.tif'
        layer=QgsVectorLayer(path,name,'ogr')
        layerR=QgsRasterLayer(pathR,nameR)
        if not layer.isValid():
            raise IOError("Failed to open")
        if not layerR.isValid():
            raise IOError("Failed to open")
        QgsProject.instance().addMapLayer(layer)
        QgsProject.instance().addMapLayer(layerR)

    def MainProcess(self):
        # 栅格文件读取到数组
        path = self.line_cost.text()    # TIF文件路径
        ds = gdal.Open(path)
        band1 = np.abs(ds.ReadAsArray())
        nearby = self.cb_path.currentText()     # 邻接方式的文本
        start_time = time.time()
        min_dist, route_list = a_star(band1, coord_to_num(ds, 116.1799, 40.1698),
                                      coord_to_num(ds, 116.918, 40.525), nearby)
        print('minimum cost distance:', min_dist)
        print('time use:', time.time() - start_time, 'seconds')

        # 从数组写回栅格文件
